diff --git a/.gitignore b/.gitignore
index b33f18f8ef8..8c881b0c8a5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -24,6 +24,8 @@ venv/
 include/ord/Version.hh
 
 build
+build_linux
+build_mac
 test/results
 flow
 
diff --git a/src/gui/include/gui/gui.h b/src/gui/include/gui/gui.h
index a182172d5f2..fa64aaf2832 100644
--- a/src/gui/include/gui/gui.h
+++ b/src/gui/include/gui/gui.h
@@ -803,8 +803,32 @@ class Gui
   utl::Logger* logger_;
   odb::dbDatabase* db_;
 
+  // There are RTTI implementation differences between libstdc++ and libc++,
+  // where the latter seems to generate multiple typeids for classes including
+  // but not limited to sta::Instance* in different compile units. We have been
+  // unable to remedy this.
+  //
+  // These classes are a workaround such that unless __GLIBCXX__ is set, hashing
+  // and comparing are done on the type's name instead, which adds a negligible
+  // performance penalty but has the distinct advantage of not crashing when an
+  // Instance is clicked in the GUI.
+  //
+  // In the event the RTTI issue is ever resolved, the following two structs may
+  // be removed.
+  struct TypeInfoHasher
+  {
+    std::size_t operator()(const std::type_index& x) const;
+  };
+  struct TypeInfoComparator
+  {
+    bool operator()(const std::type_index& a, const std::type_index& b) const;
+  };
+
   // Maps types to descriptors
-  std::unordered_map<std::type_index, std::unique_ptr<const Descriptor>>
+  std::unordered_map<std::type_index,
+                     std::unique_ptr<const Descriptor>,
+                     TypeInfoHasher,
+                     TypeInfoComparator>
       descriptors_;
   // Heatmaps
   std::set<HeatMapDataSource*> heat_maps_;
diff --git a/src/gui/src/gui.cpp b/src/gui/src/gui.cpp
index 4762022dd84..49a2f493086 100644
--- a/src/gui/src/gui.cpp
+++ b/src/gui/src/gui.cpp
@@ -1336,6 +1336,26 @@ void Gui::updateTimingReport()
   main_window->getTimingWidget()->populatePaths();
 }
 
+// See class header for documentation.
+std::size_t Gui::TypeInfoHasher::operator()(const std::type_index& x) const
+{
+#ifdef __GLIBCXX__
+  return std::hash<std::type_index>{}(x);
+#else
+  return std::hash<std::string_view>{}(std::string_view(x.name()));
+#endif
+}
+// See class header for documentation.
+bool Gui::TypeInfoComparator::operator()(const std::type_index& a,
+                                         const std::type_index& b) const
+{
+#ifdef __GLIBCXX__
+  return a == b;
+#else
+  return strcmp(a.name(), b.name()) == 0;
+#endif
+}
+
 class SafeApplication : public QApplication
 {
  public:
