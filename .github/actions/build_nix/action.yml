name: Build/Cache Nix
description: Builds `default.nix` for a platform, caching the results (if applicable)
inputs:
  cachix_cache:
    description: "The name of the Cachix cache to download to and/or upload from"
    required: true
    default: "openlane"
  cachix_token:
    description: "An authentication token for Cachix"
    required: false
    default: ""
  shell:
    description: "Shell to use"
    required: true
    default: "bash"
  nix_system:
    description: "The nix platform string to build for"
    required: false
    default: "x86_64-linux"
runs:
  using: "composite"
  steps:
    - name: Setup Nix
      uses: ./.github/actions/setup_nix
      with:
        cachix_cache: ${{ inputs.cachix_cache }}
        cachix_token: "${{ inputs.cachix_token }}"
    - name: Build
      shell: ${{ inputs.shell }}
      run: |
        echo "#################################################################"
        nix build .#devShells.${{ inputs.nix_system }}.default
        sudo du -hs /nix/store/* | sort -h | tail -n 20
    #    - name: Unit/Step Tests
    #      shell: ${{ inputs.shell }}
    #      run: |
    #        echo "#################################################################"
    #        nix-shell ${{ inputs.nix_build_args }} --run "pytest --step-rx '.' -n auto"
    #    - name: Smoke Test
    #      shell: ${{ inputs.shell }}
    #      run: |
    #        echo "#################################################################"
    #        nix-shell ${{ inputs.nix_build_args }} --run "openlane --smoke-test"
    - name: Setup Cachix
      uses: cachix/cachix-action@v13
      if: ${{ inputs.cachix_token != '' }}
      with:
        name: ${{ inputs.cachix_cache }}
        authToken: "${{ inputs.cachix_token }}"
    - name: Push to Cachix
      shell: ${{ inputs.shell }}
      if: ${{ inputs.cachix_token != '' }}
      run: |
        echo "#################################################################"
        nix build --print-out-paths .#devShells.${{ inputs.nix_system }}.default | cachix
