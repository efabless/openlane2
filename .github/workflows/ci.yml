name: CI

# Events that trigger workflow
on:
  push:
    branches:
      - "*"
  pull_request:

jobs:
  prepare-test-matrices:
    name: Prepare Test Matrices
    runs-on: ubuntu-22.04
    outputs:
      design_matrix: ${{ steps.set-matrix.outputs.design_matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Python Dependencies
        run: |
          python3 -m pip install click pyyaml
      - name: Determine If Running Extended Test Set
        run: |
          export EVENT_NAME=${{ github.event_name }};
          python3 ./.github/scripts/determine_test_set.py
      - name: Set Matrix
        id: set-matrix
        run: |
          python3 ./.github/test_sets/get_test_matrix.py --scl sky130A/sky130_fd_sc_hd --scl gf180mcuC/gf180mcu_fd_sc_mcu7t5v0 $TEST_SETS
          echo "design_matrix=$(python3 ./.github/test_sets/get_test_matrix.py --scl sky130A/sky130_fd_sc_hd --scl gf180mcuC/gf180mcu_fd_sc_mcu7t5v0 $TEST_SETS)" >> $GITHUB_OUTPUT
  lint:
    name: Lint
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Setup Environment
        uses: ./.github/actions/setup_env
      - name: Install Linters
        run: make venv
      - name: Lint
        run: make lint
  build-linux-amd64:
    needs: lint
    runs-on: ubuntu-22.04
    name: Build (Nix on Linux/amd64)
    steps:
      - uses: actions/checkout@v3
      - name: Build with Nix
        uses: ./.github/actions/build_nix
        with:
          cachix_cache: ${{ vars.CACHIX_CACHE }}
          cachix_token: "${{ secrets.CACHIX_TOKEN }}"
  build-mac-amd64:
    needs: lint
    runs-on: macos-12
    name: Build (Nix on macOS/amd64)
    steps:
      - uses: actions/checkout@v3
      - name: Build with Nix
        uses: ./.github/actions/build_nix
        with:
          cachix_cache: ${{ vars.CACHIX_CACHE }}
          cachix_token: "${{ secrets.CACHIX_TOKEN }}"
  build-py:
    runs-on: ubuntu-22.04
    needs: lint
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
      fail-fast: false
    name: Build (Python ${{ matrix.python-version }})
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Environment
        uses: ./.github/actions/setup_env
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Smoke Test
        run: |
          make venv
          ./venv/bin/python3 -m openlane --version
  test:
    runs-on: ubuntu-22.04
    needs: [build-linux-amd64, prepare-test-matrices]
    name: Test Design ${{ matrix.design.name }} (${{ matrix.design.pdk }}/${{matrix.design.scl}})
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-test-matrices.outputs.design_matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Environment
        uses: ./.github/actions/setup_env
      - name: Setup Nix
        uses: ./.github/actions/setup_nix
        with:
          cachix_cache: ${{ vars.CACHIX_CACHE }}
      - name: Run Test
        run: |
          nix-shell --run "\
            python3 -m openlane\
            --run-tag CI\
            --pdk ${{ matrix.design.pdk }}\
            --scl ${{matrix.design.scl}}\
            ${{ matrix.design.config }}\
          "
      - name: Upload Run Folder
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.design.name }}-${{ matrix.design.pdk }}-${{ matrix.design.scl }}
          path: ${{ matrix.design.run_folder }}
  publish:
    runs-on: ubuntu-22.04
    needs: [test, build-mac-amd64, build-py]
    name: Test (and Publish, if applicable)
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Environment
        uses: ./.github/actions/setup_env
      - name: Setup Nix
        uses: ./.github/actions/setup_nix
        with:
          cachix_cache: ${{ vars.CACHIX_CACHE }}
      - name: Build
        run: |
          nix-build
      - name: Create Image (Docker)
        run: |
          $(nix-build --argstr name openlane --argstr tag-override intermediate docker.nix) | docker load
      - name: Smoke Test (Docker)
        run: |
          docker run --rm\
            -v /tmp:/tmp\
            -e TMPDIR=/tmp\
            openlane:intermediate\
            python3 -m openlane --smoke-test
      - name: Auth (Docker)
        if: ${{ env.PUBLISH == '1' }}
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Push (Docker)
        if: ${{ env.PUBLISH == '1' }}
        run: |
          docker tag openlane:intermediate ghcr.io/${{ github.repository }}:$NEW_TAG
          docker push ghcr.io/${{ github.repository }}:$NEW_TAG
      - name: Set Up Python
        if: ${{ env.PUBLISH == '1' }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Build Distribution
        if: ${{ env.PUBLISH == '1' }}
        run: |
          make dist
      - name: Publish
        if: ${{ env.PUBLISH == '1' }}
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
      - name: Tag Commit
        if: ${{ env.PUBLISH == '1' }}
        uses: tvdias/github-tagger@v0.0.1
        with:
          tag: "${{ env.NEW_TAG }}"
          repo-token: "${{ secrets.GH_TOKEN }}"
