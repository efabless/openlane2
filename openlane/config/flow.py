# Copyright 2023 Efabless Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from decimal import Decimal
from typing import List, Optional, Dict

from .variable import Path, Variable, StringEnum
from .pdk import PDKVariablesByID
from .config import Config

flow_variables = [
    Variable(
        "DESIGN_NAME",
        str,
        "The name of the top level module of the design.",
    ),
    Variable(
        "VERILOG_FILES",
        List[Path],
        "The path of the design's verilog files, whitespace-delimited.",
    ),
    Variable(
        "CLOCK_PERIOD",
        Decimal,
        "The clock period for the design.",
        doc_units="ns",
        default=10.0,
    ),
    Variable(
        "CLOCK_PORT",
        Optional[str],
        "The name of the design's clock port used in Static Timing Analysis.",
    ),
    Variable(
        "CLOCK_NET",
        Optional[str],
        "The name of the net input to root clock buffer used in Clock Tree Synthesis.",
        default="ref::$CLOCK_PORT",
    ),
    Variable(
        "PDK",
        str,
        "Specifies the process design kit (PDK).",
        default="sky130A",
    ),
    Variable(
        "DIODE_PADDING",
        int,
        "Diode cell padding; increases the width of diode cells during placement checks..",
        default=2,
        doc_units="sites",
    ),
    Variable(
        "EXTRA_VERILOG_MODELS",
        Optional[List[Path]],
        "Black-boxed Verilog models of pre-hardened macros used in the current design, used in synthesis.",
        deprecated_names=["VERILOG_FILES_BLACKBOX"],
    ),
    Variable(
        "EXTRA_SPICE_MODELS",
        Optional[List[Path]],
        "Black-boxed SPICE models of pre-hardened macros used in the current design, used in LVS.",
    ),
    Variable(
        "EXTRA_LEFS",
        Optional[List[Path]],
        "Specifies LEF files of pre-hardened macros used in the current design, used in placement and routing.",
    ),
    Variable(
        "EXTRA_LIBS",
        Optional[List[Path]],
        "Specifies LIB files of pre-hardened macros used in the current design, used during timing analysis. (Optional).",
    ),
    Variable(
        "EXTRA_GDS_FILES",
        Optional[List[Path]],
        "Specifies GDS files of pre-hardened macros used in the current design, used during tape-out.",
    ),
    Variable(
        "SYNTH_AUTONAME",
        bool,
        "Add a synthesis step to generate names for instances. This results in instance names that can be very long, but may be more useful than the internal names that are six digit numbers.",
        default=False,
    ),
    Variable(
        "SYNTH_MAX_FANOUT",
        int,
        "The max load that the output ports can drive.",
        default=10,
        doc_units="cells",
    ),
    Variable(
        "SYNTH_MAX_TRAN",
        Optional[Decimal],
        "The max transition time (slew) from high to low or low to high on cell inputs in ns. Used in synthesis. If not provided, it is calculated at runtime as `10%` of the provided clock period, unless that exceeds the PDK's `DEFAULT_MAX_TRAN` value.",
        doc_units="ns",
    ),
    Variable(
        "SYNTH_CLOCK_UNCERTAINTY",
        Decimal,
        "Specifies a value for the clock uncertainty/jitter for timing analysis.",
        default=0.25,
        doc_units="ns",
    ),
    Variable(
        "SYNTH_CLOCK_TRANSITION",
        Decimal,
        "Specifies a value for the clock transition /slew for timing analysis.",
        default=0.15,
        doc_units="ns",
    ),
    Variable(
        "SYNTH_TIMING_DERATE",
        Decimal,
        "Specifies a derating factor to multiply the path delays with. It specifies the upper and lower ranges of timing.",
        default=5,
        doc_units="%",
    ),
    Variable(
        "SYNTH_STRATEGY",
        StringEnum(
            "SYNTH_STRATEGY",
            [
                "AREA 0",
                "AREA 1",
                "AREA 2",
                "AREA 3",
                "AREA 4",
                "DELAY 0",
                "DELAY 1",
                "DELAY 2",
                "DELAY 3",
                "DELAY 4",
            ],
        ),
        "Strategies for abc logic synthesis and technology mapping. AREA strategies usually result in a more compact design, while DELAY strategies usually result in a design that runs at a higher frequency. Please note that there is no way to know which strategy is the best before trying them.",
        default="AREA 0",
    ),
    Variable(
        "SYNTH_BUFFERING",
        bool,
        "Enables `abc` cell buffering.",
        default=True,
    ),
    Variable(
        "SYNTH_SIZING",
        bool,
        "Enables `abc` cell sizing (instead of buffering).",
        default=False,
    ),
    Variable(
        "SYNTH_READ_BLACKBOX_LIB",
        bool,
        "A flag that enable reading the full (untrimmed) liberty file as a blackbox for synthesis. Please note that this is not used in technology mapping. This should only be used when trying to preserve gate instances in the rtl of the design.",
        default=False,
    ),
    Variable(
        "SYNTH_NO_FLAT",
        bool,
        "A flag that disables flattening the hierarchy during synthesis, only flattening it after synthesis, mapping and optimizations.",
        default=False,
    ),
    Variable(
        "SYNTH_SHARE_RESOURCES",
        bool,
        "A flag that enables yosys to reduce the number of cells by determining shareable resources and merging them.",
        default=True,
    ),
    Variable(
        "SYNTH_ADDER_TYPE",
        str,
        "Adder type to which the $add and $sub operators are mapped to.  Possible values are `YOSYS/FA/RCA/CSA`; where `YOSYS` refers to using Yosys internal adder definition, `FA` refers to full-adder structure, `RCA` refers to ripple carry adder structure, and `CSA` refers to carry select adder.",
        default="YOSYS",
    ),
    Variable(
        "SYNTH_EXTRA_MAPPING_FILE",
        Optional[Path],
        "Points to an extra techmap file for yosys that runs right after yosys `synth` before generic techmap.",
    ),
    Variable(
        "SYNTH_PARAMETERS",
        Optional[List[str]],
        "Key-value pairs to be `chparam`ed in Yosys, in the format `key1=value1`.",
    ),
    Variable(
        "SYNTH_ELABORATE_ONLY",
        bool,
        '"Elaborate" the design only without attempting any logic mapping. Useful when dealing with structural Verilog netlists.',
        default=False,
    ),
    Variable(
        "CLOCK_BUFFER_FANOUT",
        int,
        "Fanout of clock tree buffers.",
        default=16,
    ),
    Variable(
        "BASE_SDC_FILE",
        Optional[Path],
        "Specifies the base SDC file to source before running Static Timing Analysis.",
        deprecated_names=["SDC_FILE"],
    ),
    Variable(
        "VERILOG_INCLUDE_DIRS",
        Optional[List[str]],
        "Specifies the Verilog `include` directories.",
    ),
    Variable(
        "SYNTH_FLAT_TOP",
        bool,
        "Specifies whether or not the top level should be flattened during elaboration.",
        default=False,
    ),
    Variable(
        "IO_PCT",
        Decimal,
        "Specifies the percentage of the clock period used in the input/output delays. Ranges from 0 to 1.0.",
        default=20,
        doc_units="%",
    ),
    Variable(
        "STA_WRITE_LIB",
        bool,
        "Controls whether a timing model is written using OpenROAD OpenSTA after static timing analysis. This is an option as it in its current state, the timing model generation (and the model itself) can be quite buggy.",
        default=True,
    ),
    Variable(
        "FP_CORE_UTIL",
        Decimal,
        "The core utilization percentage.",
        default=50,
        doc_units="%",
    ),
    Variable(
        "FP_ASPECT_RATIO",
        Decimal,
        "The core's aspect ratio (height / width).",
        default=1,
    ),
    Variable(
        "FP_SIZING",
        StringEnum("FP_SIZING", ["relative", "absolute"]),
        "Whether to use relative sizing by making use of `FP_CORE_UTIL` or absolute one using `DIE_AREA`.",
        default="relative",
    ),
    Variable(
        "DIE_AREA",
        Optional[str],
        'Specific die area to be used in floorplanning when `FP_SIZING` is set to `absolute`. Specified as a 4-corner rectangle "x0 y0 x1 y1".',
        doc_units="μm",
    ),
    Variable(
        "CORE_AREA",
        Optional[str],
        'Specific core area (i.e. die area minus margins) to be used in floorplanning when `FP_SIZING` is set to `absolute`. Specified as a 4-corner rectangle "x0 y0 x1 y1".',
        doc_units="μm",
    ),
    Variable(
        "FP_IO_MODE",
        StringEnum("FP_IO_MODE", ["matching", "random_equidistant"]),
        "Decides the mode of the random IO placement option.",
        default="random_equidistant",
    ),
    Variable(
        "FP_PDN_VOFFSET",
        Decimal,
        "The offset of the vertical power stripes on the metal layer 4 in the power distribution network.",
        default=16.32,
        doc_units="μm",
    ),
    Variable(
        "FP_PDN_VPITCH",
        Decimal,
        "The pitch of the vertical power stripes on the metal layer 4 in the power distribution network.",
        default=153.6,
        doc_units="μm",
    ),
    Variable(
        "FP_PDN_HOFFSET",
        Decimal,
        "The offset of the horizontal power stripes on the metal layer 5 in the power distribution network.",
        default=16.65,
        doc_units="μm",
    ),
    Variable(
        "FP_PDN_HPITCH",
        Decimal,
        "The pitch of the horizontal power stripes on the metal layer 5 in the power distribution network.",
        default=153.18,
        doc_units="μm",
    ),
    Variable(
        "FP_PDN_AUTO_ADJUST",
        bool,
        "Decides whether or not the flow should attempt to re-adjust the power grid, in order for it to fit inside the core area of the design, if needed.",
        default=True,
    ),
    Variable(
        "FP_PDN_SKIPTRIM",
        bool,
        "Enables `-skip_trim` option during pdngen which skips the metal trim step, which attempts to remove metal stubs.",
        default=True,
    ),
    Variable(
        "FP_TAPCELL_DIST",
        Decimal,
        "The horizontal distance between two tapcell columns.",
        default=14,
        doc_units="μm",
    ),
    Variable(
        "FP_IO_VEXTEND",
        Decimal,
        "Extends the vertical io pins outside of the die by the specified units.",
        default=0,
        doc_units="μm",
    ),
    Variable(
        "FP_IO_HEXTEND",
        Decimal,
        "Extends the horizontal io pins outside of the die by the specified units.",
        default=0,
        doc_units="μm",
    ),
    Variable(
        "FP_IO_VLENGTH",
        Decimal,
        "The length of the vertical IOs.",
        default=4,
        doc_units="µm",
    ),
    Variable(
        "FP_IO_HLENGTH",
        Decimal,
        "The length of the horizontal IOs.",
        default=4,
        doc_units="µm",
    ),
    Variable(
        "FP_IO_VTHICKNESS_MULT",
        Decimal,
        "A multiplier for vertical pin thickness. Base thickness is the pins layer minwidth.",
        default=2,
    ),
    Variable(
        "FP_IO_HTHICKNESS_MULT",
        Decimal,
        "A multiplier for horizontal pin thickness. Base thickness is the pins layer minwidth.",
        default=2,
    ),
    Variable(
        "QUIT_ON_UNMATCHED_IO",
        bool,
        "Exit on unmatched pins in a provided `FP_PIN_ORDER_CFG` file.",
        default=True,
        deprecated_names=["FP_IO_UNMATCHED_ERROR"],
    ),
    Variable(
        "BOTTOM_MARGIN_MULT",
        Decimal,
        "The core margin, in multiples of site heights, from the bottom boundary. If `FP_SIZING` is absolute and `CORE_AREA` is set, this variable has no effect.",
        default=4,
    ),
    Variable(
        "TOP_MARGIN_MULT",
        Decimal,
        "The core margin, in multiples of site heights, from the top boundary. If `FP_SIZING` is absolute and `CORE_AREA` is set, this variable has no effect.",
        default=4,
    ),
    Variable(
        "LEFT_MARGIN_MULT",
        Decimal,
        "The core margin, in multiples of site widths, from the left boundary. If `FP_SIZING` is absolute and `CORE_AREA` is set, this variable has no effect.",
        default=12,
    ),
    Variable(
        "RIGHT_MARGIN_MULT",
        Decimal,
        "The core margin, in multiples of site widths, from the right boundary. If `FP_SIZING` is absolute and `CORE_AREA` is set, this variable has no effect.",
        default=12,
    ),
    Variable(
        "FP_PDN_CORE_RING",
        bool,
        "Enables adding a core ring around the design. More details on the control variables in the PDK config documentation.",
        default=False,
    ),
    Variable(
        "FP_PDN_ENABLE_RAILS",
        bool,
        "Enables the creation of rails in the power grid.",
        default=True,
    ),
    Variable(
        "FP_PDN_ENABLE_MACROS_GRID",
        bool,
        "Enables the connection of macros to the top level power grid.",
        default=True,
    ),
    Variable(
        "FP_PDN_MACRO_HOOKS",
        Optional[List[str]],
        "Specifies explicit power connections of internal macros to the top level power grid, in the format: macro instance names, power domain vdd and ground net names, and macro vdd and ground pin names `<instance_name> <vdd_net> <gnd_net> <vdd_pin> <gnd_pin>`.",
    ),
    Variable(
        "FP_PDN_CHECK_NODES",
        bool,
        "Enables checking for unconnected nodes in the power grid.",
        default=True,
    ),
    Variable(
        "FP_PDN_ENABLE_GLOBAL_CONNECTIONS",
        bool,
        "Enables the creation of global connections in PDN generation.",
        default=True,
    ),
    Variable(
        "FP_TAP_HORIZONTAL_HALO",
        Decimal,
        "Specify the horizontal halo size around macros during tap insertion.",
        default=10,
        doc_units="µm",
    ),
    Variable(
        "FP_TAP_VERTICAL_HALO",
        Decimal,
        "Specify the vertical halo size around macros during tap insertion.",
        default="expr::$FP_TAP_HORIZONTAL_HALO",
        doc_units="µm",
    ),
    Variable(
        "FP_PDN_HORIZONTAL_HALO",
        str,
        "Sets the horizontal halo around the macros during power grid insertion.",
        default=10,
        doc_units="µm",
    ),
    Variable(
        "FP_PDN_VERTICAL_HALO",
        Decimal,
        "Sets the vertical halo around the macros during power grid insertion.",
        default="expr::$FP_PDN_HORIZONTAL_HALO",
        doc_units="µm",
    ),
    Variable(
        "DESIGN_IS_CORE",
        bool,
        "Controls the layers used in the power grid. Depending on whether the design is the core of a chip or a macro inside the core.",
        default=True,
    ),
    Variable(
        "FP_PIN_ORDER_CFG",
        Optional[Path],
        "Points to the pin order configuration file to set the pins in specific directions (S, W, E, N). If not set, then the IO pins will be placed based on one of the other methods depending on the rest of the configuration variables.",
    ),
    Variable(
        "FP_CONTEXT_DEF",
        Optional[Path],
        "Points to the parent DEF file that includes this macro/design and uses this DEF file to determine the best locations for the pins. It must be used with `FP_CONTEXT_LEF`, otherwise it's considered non-existing. If not set, then the IO pins will be placed based on one of the other methods depending on the rest of the configurations.",
    ),
    Variable(
        "FP_CONTEXT_LEF",
        Optional[Path],
        "Points to the parent LEF file that includes this macro/design and uses this LEF file to determine the best locations for the pins. It must be used with `FP_CONTEXT_DEF`, otherwise it's considered non-existing. If not set, then the IO pins will be placed based on one of the other methods depending on the rest of the configurations.",
    ),
    Variable(
        "FP_DEF_TEMPLATE",
        Optional[Path],
        "Points to the DEF file to be used as a template when running `apply_def_template`. This will be used to exctract pin names, locations, shapes -excluding power and ground pins- as well as the die area and replicate all this information in the `CURRENT_DEF`.",
    ),
    Variable(
        "VDD_NETS",
        Optional[List[str]],
        "Specifies the power nets/pins to be used when creating the power grid for the design.",
    ),
    Variable(
        "GND_NETS",
        Optional[List[str]],
        "Specifies the ground nets/pins to be used when creating the power grid for the design.",
    ),
    Variable(
        "SYNTH_USE_PG_PINS_DEFINES",
        Optional[List[str]],
        "Specifies the power guard used in the verilog source code to specify the power and ground pins. This is used to automatically extract `VDD_NETS` and `GND_NET` variables from the verilog, with the assumption that they will be order `inout vdd1, inout gnd1, inout vdd2, inout gnd2, ...`.",
    ),
    Variable(
        "FP_IO_MIN_DISTANCE",
        Decimal,
        "The minimum distance between the IOs.",
        default=3,
        doc_units="µm",
    ),
    Variable(
        "FP_PADFRAME_CFG",
        Optional[str],
        "A configuration file passed to `padringer`, a padframe generator.",
    ),
    Variable(
        "FP_IO_HMETAL",
        Decimal,
        "The metal layer on which to place the io pins horizontally (i.e., at the top and bottom of the die).",
        default=4,
    ),
    Variable(
        "FP_IO_VMETAL",
        Decimal,
        "The metal layer on which to place the io pins vertically (i.e., on either side of the die).",
        default=3,
    ),
    Variable(
        "RSZ_DONT_TOUCH_RX",
        str,
        'A single regular expression designating nets as "don\'t touch" by resizer optimizations.',
        default="$^",
        deprecated_names=["UNBUFFER_NETS"],
    ),
    Variable(
        "PL_TARGET_DENSITY_PCT",
        Optional[Decimal],
        "The desired placement density of cells. If not specified, the value will be equal to `FP_CORE_UTIL` + 5%.",
        doc_units="%",
        deprecated_names=[("PL_TARGET_DENSITY", lambda d: Decimal(d) * Decimal(100.0))],
    ),
    Variable(
        "PL_TIME_DRIVEN",
        bool,
        "Specifies whether the placer should use time driven placement.",
        default=True,
    ),
    Variable(
        "PL_SKIP_INITIAL_PLACEMENT",
        bool,
        "Specifies whether the placer should run initial placement or not.",
        default=False,
    ),
    Variable(
        "PL_RANDOM_INITIAL_PLACEMENT",
        bool,
        "Specifies whether the placer should run random placement or not followed by replace's initial placement. This is useful if the design is tiny (less than 100 cells).",
        default=False,
    ),
    Variable(
        "PL_ROUTABILITY_DRIVEN",
        bool,
        "Specifies whether the placer should use routability driven placement.",
        default=True,
    ),
    Variable(
        "PL_RESIZER_HOLD_SLACK_MARGIN",
        Decimal,
        "Specifies a time margin for the slack when fixing hold violations. Normally the resizer will stop when it reaches zero slack. This option allows you to overfix.",
        default=0.1,
        doc_units="ns",
    ),
    Variable(
        "PL_RESIZER_SETUP_SLACK_MARGIN",
        Decimal,
        "Specifies a time margin for the slack when fixing setup violations.",
        default=0.05,
        doc_units="ns",
    ),
    Variable(
        "PL_RESIZER_HOLD_MAX_BUFFER_PCT",
        Decimal,
        "Specifies a max number of buffers to insert to fix hold violations. This number is calculated as a percentage of the number of instances in the design.",
        default=50,
        deprecated_names=["PL_RESIZER_HOLD_MAX_BUFFER_PERCENT"],
    ),
    Variable(
        "PL_RESIZER_SETUP_MAX_BUFFER_PCT",
        Decimal,
        "Specifies a max number of buffers to insert to fix setup violations. This number is calculated as a percentage of the number of instances in the design.",
        default=50,
        doc_units="%",
        deprecated_names=["PL_RESIZER_SETUP_MAX_BUFFER_PERCENT"],
    ),
    Variable(
        "PL_RESIZER_ALLOW_SETUP_VIOS",
        bool,
        "Allows the creation of setup violations when fixing hold violations.",
        default=False,
    ),
    Variable(
        "DONT_USE_CELLS",
        Optional[List[str]],
        "An option list of cells to not use during resizer optimizations.",
    ),
    Variable(
        "PL_ESTIMATE_PARASITICS",
        bool,
        "Specifies whether or not to run STA after global placement using OpenROAD's estimate_parasitics -placement and generates reports under `logs/placement`.",
        default=True,
    ),
    Variable(
        "PL_OPTIMIZE_MIRRORING",
        bool,
        "Specifies whether or not to run an optimize_mirroring pass whenever detailed placement happens. This pass will mirror the cells whenever possible to optimize the design.",
        default=True,
    ),
    Variable(
        "DESIGN_REPAIR_BUFFER_INPUT_PORTS",
        bool,
        "Specifies whether or not to insert buffers on input ports when design repairs are run.",
        default=True,
        deprecated_names=["PL_RESIZER_BUFFER_INPUT_PORTS"],
    ),
    Variable(
        "DESIGN_REPAIR_BUFFER_OUTPUT_PORTS",
        bool,
        "Specifies whether or not to insert buffers on input ports when design repairs are run.",
        default=True,
        deprecated_names=["PL_RESIZER_BUFFER_OUTPUT_PORTS"],
    ),
    Variable(
        "DESIGN_REPAIR_TIE_FANOUT",
        bool,
        "Specifies whether or not to repair tie cells fanout when design repairs are run.",
        default=True,
        deprecated_names=["PL_RESIZER_REPAIR_TIE_FANOUT"],
    ),
    Variable(
        "DESIGN_REPAIR_TIE_SEPARATION",
        bool,
        "Allows tie separation when performing design repairs.",
        default=False,
        deprecated_names=["PL_RESIZER_TIE_SEPERATION"],
    ),
    Variable(
        "DESIGN_REPAIR_MAX_WIRE_LENGTH",
        Decimal,
        "Specifies the maximum wire length cap used by resizer to insert buffers. If set to 0, no buffers will be inserted.",
        default=0,
        doc_units="µm",
        deprecated_names=["PL_RESIZER_MAX_WIRE_LENGTH"],
    ),
    Variable(
        "DESIGN_REPAIR_MAX_SLEW_PCT",
        Decimal,
        "Specifies a margin for the slews during design repair.",
        default=20,
        doc_units="%",
        deprecated_names=["PL_RESIZER_MAX_SLEW_MARGIN"],
    ),
    Variable(
        "DESIGN_REPAIR_MAX_CAP_PCT",
        Decimal,
        "Specifies a margin for the capacitances during design repair.",
        default=20,
        doc_units="%",
        deprecated_names=["PL_RESIZER_MAX_CAP_MARGIN"],
    ),
    Variable(
        "PL_MAX_DISPLACEMENT_X",
        Decimal,
        "Specifies how far an instance can be moved along the X-axis when finding a site where it can be placed during detailed placement.",
        default=500,
        doc_units="μm",
    ),
    Variable(
        "PL_MAX_DISPLACEMENT_Y",
        Decimal,
        "Specifies how far an instance can be moved along the Y-axis when finding a site where it can be placed during detailed placement.",
        default=100,
        doc_units="μm",
    ),
    Variable(
        "PL_MACRO_HALO",
        str,
        "Macro placement halo. Format: `{Horizontal} {Vertical}`.",
        default="0 0",
        doc_units="μm",
    ),
    Variable(
        "PL_MACRO_CHANNEL",
        str,
        "Channel widths between macros. Format: `{Horizontal} {Vertical}`.",
        default="0 0",
        doc_units="μm",
    ),
    Variable(
        "MACRO_PLACEMENT_CFG",
        Optional[Path],
        "Specifies the path a file specifying how OpenLane should place certain macros.",
    ),
    Variable(
        "CTS_TARGET_SKEW",
        Decimal,
        "The target clock skew in picoseconds.",
        default=200,
        doc_units="ps",
    ),
    Variable(
        "CTS_TOLERANCE",
        int,
        "An integer value that represents a tradeoff of QoR and runtime. Higher values will produce smaller runtime but worse QoR.",
        default=100,
    ),
    Variable(
        "CTS_SINK_CLUSTERING_SIZE",
        int,
        "Specifies the maximum number of sinks per cluster.",
        default=25,
    ),
    Variable(
        "CTS_SINK_CLUSTERING_MAX_DIAMETER",
        Decimal,
        "Specifies maximum diameter of the sink cluster.",
        default=50,
        doc_units="μm",
    ),
    Variable(
        "CTS_REPORT_TIMING",
        bool,
        "Specifies whether or not to run STA after clock tree synthesis using OpenROAD's `estimate_parasitics -placement`.",
        default=True,
    ),
    Variable(
        "CTS_CLK_MAX_WIRE_LENGTH",
        Decimal,
        "Specifies the maximum wire length on the clock net.",
        default=0,
        doc_units="µm",
    ),
    Variable(
        "CTS_DISABLE_POST_PROCESSING",
        bool,
        "Specifies whether or not to disable post cts processing for outlier sinks.",
        default=False,
    ),
    Variable(
        "CTS_DISTANCE_BETWEEN_BUFFERS",
        Decimal,
        "Specifies the distance between buffers when creating the clock tree.",
        default=0,
        doc_units="µm",
    ),
    Variable(
        "ROUTING_CORES",
        Optional[int],
        "Specifies the number of threads to be used in OpenROAD Detailed Routing. If unset, this will be equal to your thread count.",
    ),
    Variable(
        "RT_CLOCK_MIN_LAYER",
        Optional[str],
        "The name of lowest layer to be used in routing the clock net.",
    ),
    Variable(
        "RT_CLOCK_MAX_LAYER",
        Optional[str],
        "The name of highest layer to be used in routing the clock net.",
    ),
    Variable(
        "GRT_RESIZER_MAX_WIRE_LENGTH",
        Decimal,
        "Specifies the maximum wire length cap used by resizer to insert buffers. If set to 0, no buffers will be inserted.",
        default=0,
        doc_units="µm",
        deprecated_names=["GLB_RESIZER_MAX_WIRE_LENGTH"],
    ),
    Variable(
        "GRT_RESIZER_MAX_SLEW_MARGIN",
        Decimal,
        "Specifies a margin for the slews.",
        default=10,
        deprecated_names=["GLB_RESIZER_MAX_SLEW_MARGIN"],
    ),
    Variable(
        "GRT_RESIZER_MAX_CAP_MARGIN",
        Decimal,
        "Specifies a margin for the capacitances.",
        default=10,
        deprecated_names=["GLB_RESIZER_MAX_CAP_MARGIN"],
    ),
    Variable(
        "GRT_RESIZER_HOLD_SLACK_MARGIN",
        str,
        "Specifies a time margin for the slack when fixing hold violations. Normally the resizer will stop when it reaches zero slack. This option allows you to overfix.",
        default=0.05,
        doc_units="ns",
        deprecated_names=["GLB_RESIZER_HOLD_SLACK_MARGIN"],
    ),
    Variable(
        "GRT_RESIZER_SETUP_SLACK_MARGIN",
        str,
        "Specifies a time margin for the slack when fixing setup violations.",
        default=0.025,
        doc_units="ns",
        deprecated_names=["GLB_RESIZER_SETUP_SLACK_MARGIN"],
    ),
    Variable(
        "GRT_RESIZER_HOLD_MAX_BUFFER_PCT",
        Decimal,
        "Specifies a max number of buffers to insert to fix hold violations. This number is calculated as a percentage of the number of instances in the design.",
        default=50,
        doc_units="%",
        deprecated_names=["GLB_RESIZER_HOLD_MAX_BUFFER_PERCENT"],
    ),
    Variable(
        "GRT_RESIZER_SETUP_MAX_BUFFER_PCT",
        Decimal,
        "Specifies a max number of buffers to insert to fix setup violations. This number is calculated as a percentage of the number of instances in the design.",
        default=50,
        doc_units="%",
        deprecated_names=["GLB_RESIZER_SETUP_MAX_BUFFER_PERCENT"],
    ),
    Variable(
        "GRT_RESIZER_ALLOW_SETUP_VIOS",
        bool,
        "Allows setup violations when fixing hold.",
        default=False,
        deprecated_names=["GLB_RESIZER_ALLOW_SETUP_VIOS"],
    ),
    Variable(
        "GRT_OPTIMIZE_MIRRORING",
        bool,
        "Specifies whether or not to run an optimize_mirroring pass whenever detailed placement happens after Routing timing optimization. This pass will mirror the cells whenever possible to optimize the design.",
        default=True,
        deprecated_names=["GLB_OPTIMIZE_MIRRORING"],
    ),
    Variable(
        "GRT_OVERFLOW_ITERS",
        int,
        "The maximum number of iterations waiting for the overflow to reach the desired value.",
        default=50,
    ),
    Variable(
        "GRT_ANT_ITERS",
        int,
        "The maximum number of iterations for global router repair_antenna. This option is only available in `DIODE_INSERTION_STRATEGY` = `3`.",
        default=3,
    ),
    Variable(
        "GRT_ESTIMATE_PARASITICS",
        bool,
        "Specifies whether or not to run STA after global routing using OpenROAD's `estimate_parasitics -global_routing`.",
        default=True,
    ),
    Variable(
        "GRT_MAX_DIODE_INS_ITERS",
        int,
        "Controls the maximum number of iterations at which re-running Fastroute for diode insertion stops. Each iteration ARC detects the violations and FastRoute fixes them by inserting diodes, then producing the new DEF. The number of antenna violations is compared with the previous iteration and if they are equal or the number is greater the iterations stop and the DEF from the previous iteration is used in the rest of the flow. If the current antenna violations reach zero, the current def will be used and the iterations will not continue. This option is only available in DIODE_INSERTION_STRATEGY = `3` and `6`.",
        default=1,
    ),
    Variable(
        "GRT_OBS",
        Optional[str],
        'Specifies custom obstruction to be added prior to global routing. Comma-delimited list of layer and coordinates: `layer llx lly urx ury`, where `ll` and `ur` stand for "lower left" and "upper right" respectively. (Example: `li1 0 100 1000 300, met5 0 0 1000 500`).',
    ),
    Variable(
        "GRT_ADJUSTMENT",
        Decimal,
        "Reduction in the routing capacity of the edges between the cells in the global routing graph. Values range from 0 to 1.  1 = most reduction, 0 = least reduction.",
        default=0.3,
    ),
    Variable(
        "GRT_MACRO_EXTENSION",
        Decimal,
        "Sets the number of GCells added to the blockages boundaries from macros. A GCell is typically defined in terms of Mx routing tracks. The default GCell size is 15 M3 pitches.",
        default=0,
    ),
    Variable(
        "GRT_ALLOW_CONGESTION",
        bool,
        "Allow congestion during global routing",
        default=False,
    ),
    Variable(
        "GRT_REPAIR_ANTENNAE",
        bool,
        "Specifies the insertion strategy of diodes to be used in the flow.",
        default=True,
        deprecated_names=[("DIODE_INSERTION_STRATEGY", lambda x: x in [3, 6])],
    ),
    Variable(
        "DRT_MIN_LAYER",
        Optional[str],
        "An optional override to the lowest layer used in detailed routing. For example, in sky130, you may want global routing to avoid li1, but let detailed routing use li1 if it has to.",
    ),
    Variable(
        "DRT_MAX_LAYER",
        Optional[str],
        "An optional override to the highest layer used in detailed routing.",
    ),
    Variable(
        "DRT_OPT_ITERS",
        int,
        "Specifies the maximum number of optimization iterations during Detailed Routing in TritonRoute.",
        default=64,
    ),
    Variable(
        "RCX_MERGE_VIA_WIRE_RES",
        bool,
        "If enabled, the via and wire resistances will be merged.",
        default=True,
    ),
    Variable(
        "RCX_SDC_FILE",
        Optional[Path],
        "Specifies SDC file to be used for RCX-based STA, which can be different from the one used for implementation.",
    ),
    Variable(
        "MAGIC_PAD",
        bool,
        "A flag to pad the views generated by magic (.mag, .lef, .gds) by one site.",
        default=False,
    ),
    Variable(
        "MAGIC_ZEROIZE_ORIGIN",
        bool,
        "A flag to move the layout such that it's origin in the lef generated by magic is 0,0.",
        default=False,
    ),
    Variable(
        "MAGIC_GENERATE_GDS",
        bool,
        "A flag to generate gds view via magic.",
        default=True,
    ),
    Variable(
        "MAGIC_GENERATE_LEF",
        bool,
        "A flag to generate lef view via magic.",
        default=True,
    ),
    Variable(
        "MAGIC_GENERATE_MAGLEF",
        bool,
        "A flag to generate maglef view via magic. Requires `MAGIC_GENERATE_LEF` to be also set.",
        default=True,
    ),
    Variable(
        "MAGIC_WRITE_FULL_LEF",
        bool,
        "A flag to specify whether or not the output LEF should include all shapes inside the macro or an abstracted view of the macro lef view via magic.",
        default=False,
    ),
    Variable(
        "MAGIC_DRC_USE_GDS",
        bool,
        "A flag to choose whether to run the magic DRC checks on GDS or not. If not, then the checks will be done on the DEF/LEF, which is faster.",
        default=False,
    ),
    Variable(
        "MAGIC_EXT_USE_GDS",
        bool,
        "A flag to choose whether to use GDS for spice extraction or not. If not, then the extraction will be done using the DEF/LEF, which is faster.",
        default=False,
    ),
    Variable(
        "MAGIC_INCLUDE_GDS_POINTERS",
        bool,
        "A flag to choose whether to include GDS pointers in the generated mag files or not.",
        default=False,
    ),
    Variable(
        "MAGIC_DISABLE_HIER_GDS",
        bool,
        "A flag to disable cif hier and array during GDSII writing.* 1=Enabled `<so this hier gds will be disabled>`, 0=Disabled `<so this hier gds will be enabled>`.",
        default=True,
    ),
    Variable(
        "MAGIC_DEF_NO_BLOCKAGES",
        bool,
        "If set to true, blockages in DEF files are ignored. Otherwise, they are read as sheets of metal by Magic.",
        default=True,
    ),
    Variable(
        "MAGIC_DEF_LABELS",
        bool,
        "A flag to choose whether labels are read with DEF files or not. From magic docs: \"The '-labels' option to the 'def read' command causes each net in the NETS and SPECIALNETS sections of the DEF file to be annotated with a label having the net name as the label text.\" 1 = Labels, 0 = Unlabeled.",
        default=True,
    ),
    Variable(
        "MAGIC_GDS_ALLOW_ABSTRACT",
        bool,
        "A flag to allow abstract view of macros during magic gds generation. 1 = Allow, 0 = Disallow.",
        default=False,
    ),
    Variable(
        "MAGIC_GDS_POLYGON_SUBCELLS",
        bool,
        'A flag to enable polygon subcells in magic for gds read potentially speeding up magic. From magic docs: "Put non-Manhattan polygons. This prevents interations with other polygons on the same plane and so reduces tile splitting" 1 = Allow, 0 = Disallow.',
        default=False,
    ),
    Variable(
        "LVS_INSERT_POWER_PINS",
        bool,
        "Enables power pin insertion before running LVS.",
        default=True,
    ),
    Variable(
        "LVS_CONNECT_BY_LABEL",
        bool,
        "Enables connections by label in LVS by skipping `extract unique` in magic extractions.",
        default=False,
    ),
    Variable(
        "YOSYS_REWRITE_VERILOG",
        bool,
        "Enables yosys to rewrite the verilog before LVS producing a canonical verilog netlist with verbose wire declarations.",
        default=False,
    ),
    Variable(
        "RUN_CTS",
        bool,
        "Enable clock tree synthesis.",
        default=True,
        deprecated_names=["CLOCK_TREE_SYNTH"],
    ),
    Variable(
        "RUN_POST_GPL_REPAIR_DESIGN",
        bool,
        "Specifies whether post-global placement resizer design repairs should be performed or not.",
        default=True,
        deprecated_names=["PL_RESIZER_DESIGN_OPTIMIZATIONS"],
    ),
    Variable(
        "RUN_POST_CTS_RESIZER_TIMING",
        bool,
        "Specifies whether post-detailed placement resizer timing optimizations should be performed or not.",
        default=True,
        deprecated_names=["PL_RESIZER_TIMING_OPTIMIZATIONS"],
    ),
    Variable(
        "RUN_POST_GRT_RESIZER_TIMING",
        bool,
        "Specifies whether post-global routing timing optimizations should be performed or not.",
        default=True,
        deprecated_names=["GLB_RESIZER_TIMING_OPTIMIZATIONS"],
    ),
    Variable(
        "RUN_DRT",
        bool,
        "Enables detailed routing.",
        default=True,
    ),
    Variable(
        "RUN_LVS",
        bool,
        "Enables running LVS.",
        default=True,
    ),
    Variable(
        "RUN_MAGIC_STREAMOUT",
        bool,
        "Enables running GDSII streaming out using Magic.",
        default=True,
        deprecated_names=["RUN_MAGIC"],
    ),
    Variable(
        "RUN_MAGIC_DRC",
        bool,
        "Enables running magic DRC on GDSII produced by Magic.",
        default=True,
    ),
    Variable(
        "RUN_KLAYOUT_STREAMOUT",
        bool,
        "Enables streaming GDS-II using KLayout.",
        default=True,
        deprecated_names=["RUN_KLAYOUT"],
    ),
    Variable(
        "RUN_KLAYOUT_DRC",
        bool,
        "Enables running KLayout DRC on GDSII produced by magic.",
        default=False,
    ),
    Variable(
        "RUN_KLAYOUT_XOR",
        bool,
        "Enables running KLayout XOR on the two GDS-II files generated by Magic and Klayout. Both RUN_MAGIC and RUN_KLAYOUT must be set to true, and the PDK must support both signoff tools.",
        default=True,
    ),
    Variable(
        "RUN_SPEF_EXTRACTION",
        bool,
        "Specifies whether or not to run SPEF extraction on the routed DEF.",
        default=True,
    ),
    Variable(
        "RUN_CVC",
        bool,
        "Runs the Circuit Validity Checker on the output spice, which is a voltage-aware ERC checker for CDL netlists. Will not run unless supported by the current PDK.",
        default=True,
    ),
    Variable(
        "RUN_IRDROP_REPORT",
        bool,
        "Creates an IR Drop report using OpenROAD PSM.",
        default=True,
    ),
    Variable(
        "RUN_TAP_DECAP_INSERTION",
        bool,
        "Enables tap and decap cells insertion after floorplanning.",
        default=True,
        deprecated_names=["TAP_DECAP_INSERTION"],
    ),
    Variable(
        "RUN_FILL_INSERTION",
        bool,
        "Enables fill cells insertion after CTS (if CTS itself is enabled).",
        default=True,
    ),
    Variable(
        "KLAYOUT_DRC_KLAYOUT_GDS",
        bool,
        "Enables running KLayout DRC on GDSII produced by KLayout.",
        default=False,
    ),
    Variable(
        "GENERATE_FINAL_SUMMARY_REPORT",
        bool,
        "Specifies whether or not to generate a final summary report after the run is completed.",
        default=True,
    ),
    Variable(
        "LEC_ENABLE",
        bool,
        "Enables logic verification using yosys, for comparing each netlist at each stage of the flow with the previous netlist and verifying that they are logically equivalent. Warning: this will increase the runtime significantly.",
        default=False,
    ),
    Variable(
        "USE_GPIO_PADS",
        bool,
        "Decides whether or not to use the gpio pads in routing by merging their LEF file set in `USE_GPIO_ROUTING_LEF` and blackboxing their verilog modules set in `GPIO_PADS_VERILOG`.",
        default=False,
    ),
    Variable(
        "PRIMARY_SIGNOFF_TOOL",
        StringEnum("PRIMARY_SIGNOFF_TOOL", ["magic", "klayout"]),
        "Specify the primary signoff tool for taping out.",
        default="magic",
    ),
    Variable(
        "KLAYOUT_XOR_GDS",
        bool,
        "If `RUN_KLAYOUT_XOR` is enabled, this will enable producing a GDS output from the XOR along with its PNG export.",
        default=True,
    ),
    Variable(
        "KLAYOUT_XOR_XML",
        bool,
        "If `RUN_KLAYOUT_XOR` is enabled, this will enable producing an XML output from the XOR.",
        default=True,
    ),
    Variable(
        "TAKE_LAYOUT_SCROT",
        bool,
        "Enables running KLayout to take a PNG screenshot of the produced layout (currently configured to run on the results of each stage).",
        default=False,
    ),
    Variable(
        "KLAYOUT_XOR_THREADS",
        int,
        "Specifies number of threads used in the KLayout XOR check.",
        default=1,
    ),
    Variable(
        "CHECK_UNMAPPED_CELLS",
        bool,
        "Checks if there are unmapped cells after synthesis and aborts if any was found.",
        default=True,
    ),
    Variable(
        "CHECK_ASSIGN_STATEMENTS",
        bool,
        "Checks for assign statement in the generated gate level netlist and aborts of any was found.1 = Enabled, 0 = Disabled.",
        default=False,
    ),
    Variable(
        "QUIT_ON_TR_DRC",
        bool,
        "Checks for DRC violations after routing and exits the flow if any was found.",
        default=True,
    ),
    Variable(
        "QUIT_ON_LONG_WIRE",
        bool,
        "Exits the flow if any wire length exceeds the threshold set in the PDK.",
        default=False,
    ),
    Variable(
        "QUIT_ON_MAGIC_DRC",
        bool,
        "Checks for DRC violations after magic DRC is executed and exits the flow if any was found.",
        default=True,
    ),
    Variable(
        "QUIT_ON_ILLEGAL_OVERLAPS",
        bool,
        "Checks for illegal overlaps during magic extraction. In some cases, these imply existing undetected shorts in the design. It also exits the flow if any was found.",
        default=True,
    ),
    Variable(
        "QUIT_ON_LVS_ERROR",
        bool,
        "Checks for LVS errors after netgen LVS is executed and exits the flow if any was found.",
        default=True,
    ),
]

FlowVariablesByID: Dict[str, Variable] = {
    variable.name: variable for variable in flow_variables
}

removed_flow_variables: Dict[str, str] = {
    "PL_RANDOM_GLB_PLACEMENT": "PL_RANDOM_GLB_PLACEMENT has been removed: the random global placer no longer yields a tangible benefit with newer versions of OpenROAD."
}


def validate_user_config(
    config: Config,
    ignore_keys: List[str],
    processed_so_far: Optional[Config] = None,
):
    return Variable.validate_config(
        config,
        ignore_keys,
        flow_variables,
        alt=PDKVariablesByID,
        removed=removed_flow_variables,
        processed_so_far=processed_so_far,
    )
