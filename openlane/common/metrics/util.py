# Copyright 2023 Efabless Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import re
from decimal import Decimal
from dataclasses import dataclass
import textwrap
from typing import (
    Mapping,
    Tuple,
    Dict,
    Any,
    Iterable,
    Optional,
    Sequence,
    Union,
)

import rich.table

from .library import Metric, AggregationInfo

from ..types import is_number

modifier_rx = re.compile(r"([\w\-]+)\:([\w\-]+)")


def parse_metric_modifiers(metric_name: str) -> Tuple[str, Mapping[str, str]]:
    """
    Parses a metric name into a base and modifiers as specified in
    the `Metrics4ML standard <https://github.com/ieee-ceda-datc/datc-rdf-Metrics4ML>`_.

    :param metric_name: The name of the metric as generated by a utility.
    :returns: A tuple of the base part as a string, then the modifiers as
        a key-value mapping.
    """
    mn_mut = metric_name.split("__")
    modifiers = {}
    i = len(mn_mut) - 1
    if ":" in mn_mut[i]:
        modifier_list = mn_mut[i].split(":")
        if len(modifier_list) % 2 == 0:
            for i in range(0, len(modifier_list) - 1, 2):
                modifiers[modifier_list[i]] = modifier_list[i + 1]
            mn_mut.pop()
    return "__".join(mn_mut), modifiers


def aggregate_metrics(
    input: Mapping[str, Any],
    aggregator_by_metric: Optional[Mapping[str, Union[AggregationInfo, Metric]]] = None,
) -> Dict[str, Any]:
    """
    Takes a set of metrics generated according to the `Metrics4ML standard <https://github.com/ieee-ceda-datc/datc-rdf-Metrics4ML>`_.

    :param input: A mapping of strings to values of metrics.
    :param aggregator_by_metric: A mapping of metric names to either:
        - A tuple of the initial accumulator and reducer to aggregate the values
          from all modifier metrics
        - A :ref:`Metric` class
    :returns: A tuple of the base part as a string, then the modifiers as
        a key-value mapping.
    """
    if aggregator_by_metric is None:
        aggregator_by_metric = Metric.by_name

    aggregated: Dict[str, Any] = {}
    for name, value in input.items():
        metric_name, modifiers = parse_metric_modifiers(name)
        if len(modifiers) != 1:
            # No modifiers = final aggregate, don't double-represent in sums
            # >1 modifiers = n-level nesting, not supported atm
            continue

        modifier = list(modifiers.keys())[0]

        dont_aggregate = []
        entry = aggregator_by_metric.get(metric_name)
        if isinstance(entry, Metric):
            dont_aggregate = entry.dont_aggregate or []
            entry = entry.aggregator
        if entry is None:
            continue
        if modifier in dont_aggregate:
            continue
        start, aggregator = entry
        current = aggregated.get(metric_name) or start
        aggregated[metric_name] = aggregator([current, value])

    final_values = dict(input)
    final_values.update(aggregated)
    return final_values


@dataclass
class MetricDiffRow:
    metric_name: str
    before: Any
    after: Any
    delta: Optional[Decimal]
    delta_pct: Optional[Decimal]
    delta_good: Optional[bool]

    def format_values(self) -> Tuple[str, str, str]:
        before_str = str(self.before)
        if is_number(self.before):
            before_str = str(round(self.before, 6))

        after_str = str(self.after)
        if is_number(self.after):
            after_str = str(round(self.after, 6))

        delta_str = "N/A"
        if self.delta is not None:
            delta_str = str(round(self.delta, 6))
            if self.delta_pct is not None:
                delta_pct_str = str(round(self.delta_pct, 2))
                if self.delta_pct >= 0:
                    delta_pct_str = f"+{delta_pct_str}"
                delta_str = f"{delta_str} ({delta_pct_str}%)"

        return before_str, after_str, delta_str

    @classmethod
    def render_rich(Self, rows: Iterable["MetricDiffRow"]) -> rich.table.Table:
        table = rich.table.Table()
        table.add_column("Metric")
        table.add_column("Before")
        table.add_column("After")
        table.add_column("Delta")

        for row in rows:
            before_color = "blue"
            color = "blue"
            if row.delta_good is not None:
                if row.delta_good:
                    before_color = "red"
                    color = "green"
                else:
                    before_color = "green"
                    color = "red"

            before, after, delta = row.format_values()

            table.add_row(
                row.metric_name,
                f"[{before_color}]{before}",
                f"[{color}]{after}",
                f"[{color}]{delta}",
            )

        return table

    @classmethod
    def render_md(Self, rows: Iterable["MetricDiffRow"]) -> str:
        table = textwrap.dedent(
            """
            | Metric | Before | After | Delta |
            | - | - | - | - |
            """
        )
        for row in rows:
            before, after, delta = row.format_values()
            emoji = ""
            if row.delta_good is not None:
                if row.delta_good:
                    emoji = "⭕"
                else:
                    emoji = "❗"
            table += f"| {row.metric_name} | {before} | {after} | {delta} {emoji} |\n"
        return table

    @classmethod
    def from_metrics(
        Self,
        lhs: dict,
        rhs: dict,
        ignore_modified: bool = True,
    ) -> Sequence["MetricDiffRow"]:
        rows = []
        for metric in sorted(rhs.keys()):
            if metric not in lhs:
                continue
            metric, modifiers = parse_metric_modifiers(metric)
            if ignore_modified and len(modifiers) != 0:
                continue

            lhs_value, rhs_value = lhs[metric], rhs[metric]
            if type(lhs_value) != type(rhs_value):
                lhs_value = type(rhs_value)(lhs_value)

            delta = None
            delta_pct = None
            delta_good = None
            if is_number(rhs_value):
                rhs_value = Decimal(rhs_value)
                lhs_value = Decimal(lhs_value)
                delta = rhs_value - lhs_value
                if lhs_value == 0:
                    if rhs_value == 0:
                        delta_pct = Decimal(0)
                else:
                    delta_pct = ((rhs_value - lhs_value) / lhs_value) * 100
                if metric_object := Metric.by_name.get(metric):
                    higher_is_better = metric_object.higher_is_better
                    if higher_is_better is not None:
                        if higher_is_better:
                            delta_good = delta >= 0
                        else:
                            delta_good = delta <= 0

            rows.append(
                Self(
                    metric,
                    lhs_value,
                    rhs_value,
                    delta,
                    delta_pct,
                    delta_good,
                )
            )
        return rows
