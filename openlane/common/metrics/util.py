# Copyright 2023 Efabless Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import re
import textwrap
from typing import (
    List,
    Mapping,
    Tuple,
    Dict,
    Any,
    Iterable,
    Optional,
    Union,
)

import rich.table

from .metric import Metric, MetricAggregator, MetricComparisonResult

modifier_rx = re.compile(r"([\w\-]+)\:([\w\-]+)")


def parse_metric_modifiers(metric_name: str) -> Tuple[str, Mapping[str, str]]:
    """
    Parses a metric name into a base and modifiers as specified in
    the `Metrics4ML standard <https://github.com/ieee-ceda-datc/datc-rdf-Metrics4ML>`_.

    :param metric_name: The name of the metric as generated by a utility.
    :returns: A tuple of the base part as a string, then the modifiers as
        a key-value mapping.
    """
    mn_mut = metric_name.split("__")
    modifiers = {}
    while ":" in mn_mut[-1]:
        key, value = mn_mut.pop().split(":")
        modifiers[key] = value
    return "__".join(mn_mut), modifiers


def aggregate_metrics(
    input: Mapping[str, Any],
    aggregator_by_metric: Optional[
        Mapping[str, Union[MetricAggregator, Metric]]
    ] = None,
) -> Dict[str, Any]:
    """
    Takes a set of metrics generated according to the `Metrics4ML standard <https://github.com/ieee-ceda-datc/datc-rdf-Metrics4ML>`_.

    :param input: A mapping of strings to values of metrics.
    :param aggregator_by_metric: A mapping of metric names to either:
        - A tuple of the initial accumulator and reducer to aggregate the values
          from all modifier metrics
        - A :ref:`Metric` class
    :returns: A tuple of the base part as a string, then the modifiers as
        a key-value mapping.
    """
    if aggregator_by_metric is None:
        aggregator_by_metric = Metric.by_name

    aggregated: Dict[str, Any] = {}
    for name, value in input.items():
        metric_name, modifiers = parse_metric_modifiers(name)
        if len(modifiers) != 1:
            # No modifiers = final aggregate, don't double-represent in sums
            # >1 modifiers = n-level nesting, not supported atm
            continue

        modifier = list(modifiers.keys())[0]

        dont_aggregate: Iterable[str] = []
        entry = aggregator_by_metric.get(metric_name)
        if isinstance(entry, Metric):
            dont_aggregate = entry.dont_aggregate or []
            entry = entry.aggregator
        if entry is None:
            continue
        if modifier in dont_aggregate:
            continue
        start, aggregator = entry
        current = aggregated.get(metric_name) or start
        aggregated[metric_name] = aggregator([current, value])

    final_values = dict(input)
    final_values.update(aggregated)
    return final_values


class MetricDiff(object):
    differences: List[MetricComparisonResult]

    def __init__(self, differences: Iterable[MetricComparisonResult]) -> None:
        self.differences = list(differences)

    def render_rich(self) -> rich.table.Table:
        table = rich.table.Table()
        table.add_column("Metric")
        table.add_column("Before")
        table.add_column("After")
        table.add_column("Delta")

        for row in self.differences:
            before_format = "[blue]"
            after_format = "[blue]"
            emoji = ""
            if row.better is not None:
                if row.better:
                    before_format = "[red]"
                    after_format = "[green]"
                else:
                    before_format = "[green]"
                    after_format = "[red]"
            
            if row.critical:
                emoji = "‼️"
                after_format = f"[bold]{after_format}"

            before, after, delta = row.format_values()

            table.add_row(
                row.metric_name,
                f"{before_format}{before}",
                f"{after_format}{after}",
                f"{after_format}{delta} {emoji}",
            )

        return table

    def render_md(self) -> str:
        table = textwrap.dedent(
            """
            | Metric | Before | After | Delta |
            | - | - | - | - |
            """
        )
        for row in self.differences:
            before, after, delta = row.format_values()
            emoji = ""
            if row.better is not None:
                if row.better:
                    emoji = "⭕"
                else:
                    emoji = "❗"
            if row.critical:
                emoji = "‼️"
            table += f"| {row.metric_name} | {before} | {after} | {delta} {emoji} |\n"
        return table

    @classmethod
    def from_metrics(
        Self,
        lhs: dict,
        rhs: dict,
        ignore_modified: bool = True,
    ) -> "MetricDiff":
        def generator(lhs, rhs):
            for metric in sorted(rhs.keys()):
                if metric not in lhs:
                    continue
                base_metric, modifiers = parse_metric_modifiers(metric)
                if ignore_modified and len(modifiers) != 0:
                    continue
                lhs_value, rhs_value = lhs[metric], rhs[metric]
                if type(lhs_value) != type(rhs_value):
                    lhs_value = type(rhs_value)(lhs_value)

                if metric_object := Metric.by_name.get(base_metric):
                    yield metric_object.compare(lhs_value, rhs_value, modifiers=modifiers)

        return MetricDiff(generator(lhs, rhs))
